#!/mn/stornext/u3/trygvels/anaconda2/bin/ipython
import matplotlib
matplotlib.use('agg')
import matplotlib.pyplot as plt
import healpy as hp
import matplotlib.cm as cm
import numpy as np
import sys
import re
from matplotlib import rcParams, rc

# USE THIS STYLE! Remember savefig.dpi : 300
#plt.style.use(u"trygveplot")

rcParams['legend.fancybox'] = True
rcParams['lines.linewidth'] = 2
rcParams['savefig.dpi'] = 300
rcParams['axes.linewidth'] = 1
rcParams['axes.titlesize'] = x-large
rcParams['axes.labelsize'] = large



def cm2inch(cm):
    return cm*0.393701

maps = sys.argv[1:]

for map_ in maps:
    print("Plotting " + str(map_))
    #######################
    ####   READ MAP   #####
    #######################
    map_=str(map_)
    scale = 1 # Scale by a factor of
    filename = str(map_)
    m = hp.ma(hp.read_map(filename))*scale

    #m = np.log10(0.5*(m+np.sqrt(4.+m*m))) # Allows for linear scale around the galactic band, but logarithmic at high latitudes
    #m = np.maximum(np.minimum(m,vmax),vmin)
    nside = hp.npix2nside(len(m))

    #######################
    #### Auto-param   #####
    #######################

    # AMPLITUDE MAPS
    if "cmb" in map_:
        print("Plotting CMB map")
        vmin = -250
        vmax = 250
        unit = r"$\mu\mathrm{K}$"
        title = "CMB"

    elif "chisq" in map_:
        vmin = 0
        vmax = 76
        print("Plotting chisq with vmax = " + str(vmax))
        unit = ""
        title = r"$\chi^2$"

    elif "synch_c" in map_:
        vmin = 0
        vmax = 15
        unit = r"$\mu\mathrm{K}_{RJ}$"
        title = r"$A_s$"

    elif "ff_c" in map_:
        vmin = 0
        vmax = 1000
        unit = r"$\mu\mathrm{K}_{RJ}$"
        title = r"$A_{ff}$"

    elif "dust_c" in map_:
        vmin = 0
        vmax = 1000
        unit = r"$\mu\mathrm{K}_{RJ}$"
        title = r"$A_d$"

    elif "ame1_c" in map_:
        vmin = 0
        vmax = 300
        unit = r"$\mu\mathrm{K}_{RJ}$"
        title = r"$A_{AME}$"

    elif "co-100" in map_:
        vmin = 0
        vmax = 4
        unit = r"$\mathrm{K}_{RJ}\, \mathrm{km}/\mathrm{s}$"
        title = "CO 1-0"

    elif "co-217" in map_:
        vmin = 0
        vmax = 2
        unit = r"$\mathrm{K}_{RJ}\, \mathrm{km}/\mathrm{s}$"
        title = "CO 2-1"

    elif "co-353" in map_:
        vmin = 0
        vmax = 0.5
        unit = r"$\mathrm{K}_{RJ}\, \mathrm{km}/\mathrm{s}$"
        title = "CO 3-2"

    elif "hcn_c" in map_:
        vmin = 0
        vmax = 2
        unit = r"$\mathrm{K}_{RJ}\, \mathrm{km}/\mathrm{s}$"
        title = "HCN"

    # SPECTRAL PARAMETER MAPS
    elif "ame1_num" in map_:
        vmin = 17
        vmax = 23
        unit = "GHz"
        title = r"$\nu_{ame}$"

    elif "dust_Td" in map_:
        vmin = 14
        vmax = 30
        unit = r"$\mathrm{K}$"
        title = r"$T_d$"

    elif "dust_beta" in map_:
        vmin = 0
        vmax = 1000
        unit = ""
        title = r"$\beta_d$"

    elif "synch_beta" in map_:
        vmin = -4
        vmax = -1.5
        unit = ""
        title = r"$\beta_s$"

    elif "ff_T_e" in map_:
        vmin = 5000
        vmax = 8000
        unit = r"$\mathrm{K}$"
        title = r"$T_{e}$"


    # RESIDUAL MAPS

    elif "residual_" in map_:
        print("Plotting residual map")
        title = re.findall(r'residual_(.*?)_c01',map_)[0]
        vmin = -10
        vmax = 10
        unit =  r"$\mu\mathrm{K}$"
        if "545" in map_:
            vmin = -1e2
            vmax = 1e2
            unit = r"$\mathrm{MJy/sr}$"
        elif "857" in map_:
            vmin = -1e4
            vmax = 1e4
            unit = r"$\mathrm{MJy/sr}$"
    else:
        print("Map not recognized, plotting with min and max values")
        vmin = np.min(m)
        vmax = np.max(m)
        unit = ""
        title = ""

    ##########################
    #### Plotting Params #####
    ##########################

    outfile = map_.replace(".fits", "")
    ticks      = [vmin, vmax]           # Location of colobar ticks
    ticklabels = [str(vmin), str(vmax)] # Color bar tick labels
    unit       = unit
    freq       = title        # Short name upper right
    colorbar   = 1            # Colorbar on
    title      = 0            # title off
    titletext  = ""           # title text
    use_mask   = False

    # Image size -  ratio is always 1/2
    xsize = 2000
    ysize = int(xsize/2.)

    ######################
    #### COLOR SETUP #####
    ######################

    from matplotlib.colors import ListedColormap
    colombi1_cmap = ListedColormap(np.loadtxt("/mn/stornext/u3/trygvels/trygvetools/parchment1.dat")/255.)

    # for mask
    #colombi1_cmap = plt.get_cmap("bone")
    #colombi1_cmap.set_bad("gray") # color of missing pixels
    #colombi1_cmap.set_under("white") # color of background, necessary if you want to use
    # this colormap directly with hp.mollview(m, cmap=colombi1_cmap)
    #colombi1_cmap="jet"
    # using directly matplotlib instead of mollview has higher quality output

    theta = np.linspace(np.pi, 0, ysize)
    phi = np.linspace(-np.pi, np.pi, xsize)
    longitude = np.radians(np.linspace(-180, 180, xsize))
    latitude = np.radians(np.linspace(-90, 90, ysize))

    # project the map to a rectangular matrix xsize x ysize
    PHI, THETA = np.meshgrid(phi, theta)
    grid_pix = hp.ang2pix(nside, THETA, PHI)

    if use_mask:
        # mask
        m.mask = np.logical_not(hp.read_map("mask_T0.941_P10uK_v3_survey.fits",1))
        grid_mask = m.mask[grid_pix]
        grid_map = np.ma.MaskedArray(m[grid_pix], grid_mask)
    else:
        grid_map = m[grid_pix]

    from matplotlib.projections.geo import GeoAxes
    class ThetaFormatterShiftPi(GeoAxes.ThetaFormatter):
        """Shifts labelling by pi
        Shifts labelling from -180,180 to 0-360"""
        def __call__(self, x, pos=None):
            if x != 0:
                x *= -1
            if x < 0:
                x += 2*np.pi
            return GeoAxes.ThetaFormatter.__call__(self, x, pos)

    #for cmap, colormaptag in [(None, ''), (colombi1_cmap, "colombi1_")]:
    cmap = colombi1_cmap
    colormaptag = "colombi1_"

    for width in [8.8, 12.0, 18.0]: #, 12.0, 18.0]:
        fig = plt.figure(figsize=(cm2inch(width), cm2inch(width/2.)))
        # matplotlib is doing the mollveide projection

        #ax = fig.add_subplot(figure_rows, figure_columns, lol, projection='mollweide')
        ax = fig.add_subplot(111,projection='mollweide')

        # remove white space around the image
        #plt.subplots_adjust(left=0.01, right=0.99, top=0.95, bottom=0.01)

        # rasterized makes the map bitmap while the labels remain vectorial
        # flip longitude to the astro convention
        image = plt.pcolormesh(longitude[::-1], latitude, grid_map, vmin=vmin, vmax=vmax, rasterized=True, cmap=cmap)

        # graticule
        ax.set_longitude_grid(60)
        ax.xaxis.set_major_formatter(ThetaFormatterShiftPi(60))

        if width < 10:
            ax.set_latitude_grid(45)
            ax.set_longitude_grid_ends(90)

        if colorbar == 1:
            # colorbar
            #cb = fig.colorbar(image, orientation='horizontal', shrink=.4, pad=0.08, ticks=ticks)
            cb = fig.colorbar(image, orientation='horizontal', shrink=.3, pad=0.08, ticks=ticks)
            cb.ax.set_xticklabels(ticklabels)
            cb.ax.xaxis.set_label_text(unit)
            cb.ax.tick_params(axis='x', direction='in')
            cb.ax.xaxis.labelpad = -11 #4
            # workaround for issue with viewers, see colorbar docstring
            cb.solids.set_edgecolor("face")

        #ax.tick_params(axis='x', labelsize=10)
        #ax.tick_params(axis='y', labelsize=10)

        # remove longitude tick labels
        ax.xaxis.set_ticklabels([])
        # remove horizontal grid
        ax.xaxis.set_ticks([])
        ax.yaxis.set_ticklabels([])
        ax.yaxis.set_ticks([])

        if title:
            plt.title(titletext)

        plt.grid(True)
        if width > 12.:
            plt.text(6.,  1.3, r"%s" % freq, ha='center', va='center', fontsize=8)
        elif width == 12.:
            plt.text(6.,  1.3, r"%s" % freq, ha='center', va='center', fontsize=7)
        else:
            plt.text(6.,  1.3, r"%s" % freq, ha='center', va='center', fontsize=6)
        #plt.text(5., -1.2, r"%s" % yr, ha='center', va='center')

        plt.tight_layout()
        plt.savefig(outfile+"_w"+str(width)+".pdf", bbox_inches='tight',  pad_inches=0.02)
        plt.close()
