#!/bin/bash
read -p "Degree: [40/60] " deg
read -p "nside: [64/256] " nside
#nside=64
if [ "$nside" = "256" ]; then
  if [ "$deg" = "60" ]; then
    refmap_dx12=~/master/cdata/like/refmap/refmap_cmb_dx12_cl_v2_n0256_60arcmin_k00800_MDCOR.fits
    refmap_dx11=~/master/cdata/like/refmap/refmap_cmb_dx11_cl_v3.3_n0256_60arcmin_k00290_MDCOR.fits
  else
    refmap_dx12=~/master/cdata/like/refmap/refmap_cmb_dx12_cl_v2_n0256_k00800_MDCOR.fits
    refmap_dx11=~/master/cdata/like/refmap/refmap_cmb_dx11_cl_v3.3_n0256_k00290_MDCOR.fits
  fi
else
  if [ "$deg" = "60" ]; then
    refmap_dx12=~/master/cdata/like/refmap/refmap_cmb_dx12_cl_v2_n0064_60arcmin_k00800_MDCOR.fits
    refmap_dx11=~/master/cdata/like/refmap/refmap_cmb_dx11_cl_v3.3_n0064_60arcmin_k00290_MDCOR.fits
  else
    refmap_dx12=~/master/cdata/like/refmap/refmap_cmb_dx12_cl_v2_n0064_k00800_MDCOR.fits
    refmap_dx11=~/master/cdata/like/refmap/refmap_cmb_dx11_cl_v3.3_n0064_k00290_MDCOR.fits
  fi
fi

if [ $# -lt 1 ]; then
  echo "plot_maps [sample number]"
  exit
else
  echo "Plotting sample(s):" $@
fi

for n in $@; do
  echo "_____ Plotting sample $n _____"
  num=$(printf "%05d\n" $n)
  echo "---- Plotting CMB ----"
  map2png cmb_c0001_k$num.fits -bar -range 250

  #map2png cmb_Cl_c0001_k$num.fits -bar -range 250
  #map2png sz_c0001_k$num.fits sz_c0001_k${1}.png -bar -min 0 -max 1e-6
  #patch2img -lon 270 -lat 80 -size 40 -res 4 sz_c0001_k$num.fits -grid 10 -min 0 -max 5e-6

  echo "---- Plotting dx12 diff ----"
  map_editor subtract $refmap_dx12 cmb_c0001_k$num.fits cmb_diff_dx12-npipe_k$num.fits
  map2png cmb_diff_dx12-npipe_k$num.fits -bar -range 10

  echo "---- Plotting dx11 diff ----"
  map_editor subtract $refmap_dx11 cmb_c0001_k$num.fits cmb_diff_dx11-npipe_k$num.fits
  map2png cmb_diff_dx11-npipe_k$num.fits -bar -range 10

  echo "---- Plotting amplitudes ----"
  map2png dust_c0001_k$num.fits -bar -max 1000
  map2png synch_c0001_k$num.fits -bar -max 1000 -min 0
  map2png ame1_c0001_k$num.fits -bar -max 300
  map2png ame2_c0001_k$num.fits -bar -max 300

  map2png co_c0001_k$num.fits -bar -max 2 -min 0
  map2png co-100_c0001_k$num.fits -bar -max 2 -min 0
  map2png co-217_c0001_k$num.fits -bar -max 2 -min 0
  map2png co-353_c0001_k$num.fits -bar -max 2 -min 0
  #map2png co10_c0001_k$num.fits -bar -max 2 -min 0
  #map2png co21_c0001_k$num.fits -bar -max 2 -min 0
  #map2png co32_c0001_k$num.fits -bar -max 2 -min 0
  #map2png hcn_c0001_k$num.fits -bar -max 1 -min 0

  echo "---- Plotting indices ----"
  map2png dust_beta_c0001_k$num.fits  -bar -min 1.3 -max 2.0
  map2png dust_Td_c0001_k$num.fits  -bar -min 14 -max 30
  #map2png dust_Td_c0001_k$num_nosmooth.fits  -bar -min 14 -max 30
  map2png synch_beta_c0001_k$num.fits  -bar -min -4.0 -max -1.5
  map2png ame1_nup_c0001_k$num.fits  -bar -min 17 -max 23
  map2png ame2_nup_c0001_k$num.fits  -bar -min 15 -max 40

  map2png ff_EM_c0001_k$num.fits  -bar -min 0 -max 100
  map2png ff_T_e_c0001_k$num.fits  -bar -min 5000 -max 8000


  echo "---- Plotting residuals ----"
  freqs=("30" "44" "70" "100" "143" "217" "353" "545" "857" "WMAP" "Haslam")

  COUNTER=0
  for ((i=0; i<${#freqs[@]}; i++)) ; do
    freq=${freqs[$i]} #Frequency
    for file in res*${freq}*_c01_k$num.fits; do

      if [[ $file = *\** ]]; then #Check if contains wildcard (Map does not exist)
        echo "WARNING: " $file " does not exist!"
        continue
      fi

      if [ $freq == 545 ] || [ $freq == 857 ] ; then
        map2png -bar -range 1e-2 $file
      elif [ "$freq" = "Haslam" ] ; then
        map2png -bar -range 1e6 $file
      else
        map2png -bar -range 10 $file
      fi
      echo "Plotting" $file
      COUNTER=$[$COUNTER +1]
    done
  done

  mx=$((2 * $COUNTER))
  echo "---- Plotting chisq with max of" $mx "----"
  map2png chisq_c0001_k$num.fits chisq_k$num.png -bar -max $mx -min 0 #max is 2*numband
  echo " "
done
