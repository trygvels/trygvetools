#!/bin/bash
me=~/quiet_svn/oslo/src/f90/map_editor/map_editor


if [ $# -ne 1 ] && [ $# -ne 3 ] && [ $# -ne 4 ]; then
    echo ""
    echo "plot_all_maps [sample number #####] ( [nside] [arcmins] [l_max for smoothing] )"
    echo "If optional options are given, only file with names containing these will be plotted."
    echo "If l_max is given, the original files will be smoothed to l_max with an [arcmins] "
    echo "beam and ud_graded to nside before it is plotted."
    echo ""
    exit
fi

num=$(printf "%06d\n" $1)    # sample number
nside=$(printf "%04d\n" $2)     # nside of output, if less than 2048 used ud_grade down after smoothing
arcmins=$3
lmax=$4


maps=(
    "res_030_c0001_k"$num".fits"
    "res_044_c0001_k"$num".fits"
    "res_070_c0001_k"$num".fits"
    "cmb_c0001_k"$num".fits"
    #"co10_100-1_c0001_k"$num".fits"
    #"co10_100-2_c0001_k"$num".fits"
    #"co10_100-3_c0001_k"$num".fits"
    #"co10_100-4_c0001_k"$num".fits"
    #"co10_100-1a_c0001_k"$num".fits"
    #"co10_100-1b_c0001_k"$num".fits"
    #"co10_100-2a_c0001_k"$num".fits"
    #"co10_100-2b_c0001_k"$num".fits"
    #"co10_100-3a_c0001_k"$num".fits"
    #"co10_100-3b_c0001_k"$num".fits"
    #"co10_100-4a_c0001_k"$num".fits"
    #"co10_100-4b_c0001_k"$num".fits"
    "co10_c0001_k"$num".fits"
    #"co21_217-1_c0001_k"$num".fits"
    #"co21_217-2_c0001_k"$num".fits"
    #"co21_217-3_c0001_k"$num".fits"
    #"co21_217-4_c0001_k"$num".fits"
    #"co21_217-5a_c0001_k"$num".fits"
    #"co21_217-5b_c0001_k"$num".fits"
    #"co21_217-5_c0001_k"$num".fits"
    #"co21_217-6a_c0001_k"$num".fits"
    #"co21_217-6b_c0001_k"$num".fits"
    #"co21_217-6_c0001_k"$num".fits"
    #"co21_217-7a_c0001_k"$num".fits"
    #"co21_217-7b_c0001_k"$num".fits"
    #"co21_217-7_c0001_k"$num".fits"
    #"co21_217-8a_c0001_k"$num".fits"
    #"co21_217-8b_c0001_k"$num".fits"
    #"co21_217-8_c0001_k"$num".fits"
    "co21_c0001_k"$num".fits"
    #"co32_353-3_c0001_k"$num".fits"
    #"co32_353-4_c0001_k"$num".fits"
    "co32_c0001_k"$num".fits"
    "dust_beta_c0001_k"$num".fits"
    "dust_T_c0001_k"$num".fits"
    "res_100-1_c0001_k"$num".fits"
    "res_100-2_c0001_k"$num".fits"
    "res_100-3_c0001_k"$num".fits"
    "res_100-4_c0001_k"$num".fits"
    "res_100-1a_c0001_k"$num".fits"
    "res_100-1b_c0001_k"$num".fits"
    "res_100-2a_c0001_k"$num".fits"
    "res_100-2b_c0001_k"$num".fits"
    "res_100-3a_c0001_k"$num".fits"
    "res_100-3b_c0001_k"$num".fits"
    "res_100-4a_c0001_k"$num".fits"
    "res_100-4b_c0001_k"$num".fits"
    "res_100_c0001_k"$num".fits"
    "res_143-1_c0001_k"$num".fits"
    "res_143-2_c0001_k"$num".fits"
    "res_143-3_c0001_k"$num".fits"
    "res_143-4_c0001_k"$num".fits"
    "res_143-1a_c0001_k"$num".fits"
    "res_143-1b_c0001_k"$num".fits"
    "res_143-2a_c0001_k"$num".fits"
    "res_143-2b_c0001_k"$num".fits"
    "res_143-3a_c0001_k"$num".fits"
    "res_143-3b_c0001_k"$num".fits"
    "res_143-4a_c0001_k"$num".fits"
    "res_143-4b_c0001_k"$num".fits"
    "res_143-5_c0001_k"$num".fits"
    "res_143-6_c0001_k"$num".fits"
    "res_143-7_c0001_k"$num".fits"
    "res_143_c0001_k"$num".fits"
    "res_217-1_c0001_k"$num".fits"
    "res_217-2_c0001_k"$num".fits"
    "res_217-3_c0001_k"$num".fits"
    "res_217-4_c0001_k"$num".fits"
    "res_217-5_c0001_k"$num".fits"
    "res_217-5a_c0001_k"$num".fits"
    "res_217-5b_c0001_k"$num".fits"
    "res_217-6_c0001_k"$num".fits"
    "res_217-6a_c0001_k"$num".fits"
    "res_217-6b_c0001_k"$num".fits"
    "res_217-7_c0001_k"$num".fits"
    "res_217-7a_c0001_k"$num".fits"
    "res_217-7b_c0001_k"$num".fits"
    "res_217-8a_c0001_k"$num".fits"
    "res_217-8b_c0001_k"$num".fits"
    "res_217-8_c0001_k"$num".fits"
    "res_217_c0001_k"$num".fits"
    "res_353-1_c0001_k"$num".fits"
    "res_353-2_c0001_k"$num".fits"
    "res_353-3a_c0001_k"$num".fits"
    "res_353-3b_c0001_k"$num".fits"
    "res_353-3_c0001_k"$num".fits"
    "res_353-4a_c0001_k"$num".fits"
    "res_353-4b_c0001_k"$num".fits"
    "res_353-4_c0001_k"$num".fits"
    "res_353-5a_c0001_k"$num".fits"
    "res_353-5b_c0001_k"$num".fits"
    "res_353-5_c0001_k"$num".fits"
    "res_353-6a_c0001_k"$num".fits"
    "res_353-6b_c0001_k"$num".fits"
    "res_353-6_c0001_k"$num".fits"
    "res_353-7_c0001_k"$num".fits"
    "res_353-8_c0001_k"$num".fits"
    "res_353_c0001_k"$num".fits"
    "res_545-1_c0001_k"$num".fits"
    "res_545-2_c0001_k"$num".fits"
    "res_545-4_c0001_k"$num".fits"
    "res_545_c0001_k"$num".fits"
    "res_857-1_c0001_k"$num".fits"
    "res_857-2_c0001_k"$num".fits"
    "res_857-3_c0001_k"$num".fits"
    "res_857-4_c0001_k"$num".fits"
    "res_857_c0001_k"$num".fits"
    "synch_beta_c0001_k"$num".fits"
)

maps_more_l=(
    "synch_c0001_k"$num".fits"
    "dust_c0001_k"$num".fits"
    "chisq_c0001_k"$num".fits"
)

n_channels=3
for i in ${!maps[@]}; do
    if [ -r ${maps[$i]} ]; then
	n_channels=$(($n_channels + 1))
    fi
done



if [ $# -eq 4 ]; then
    echo "smoothing to "$arcmins" arcmin"
    ind1=0
    for i in ${!maps[@]}; do
	if [ -r ${maps[$i]} ]; then
	    if [ $i -lt 3 ]
	    then
		echo "LFI"
		$me smooth g2g ${maps[$i]} 0 $lmax 1024 0. $arcmins ${maps[$i]/.fits/_highres_${arcmins}arcmin.fits}
	    else
		echo "HFI"
		$me smooth g2g ${maps[$i]} 0 $lmax 2048 0. $arcmins ${maps[$i]/.fits/_highres_${arcmins}arcmin.fits}
	    fi
	ind1=$(($ind1 + 1))
	else
	    continue
	fi
	echo $ind1 of $n_channels finished
    done

    for i in ${!maps_more_l[@]}; do
	if [ $i -ne 2 ]; then
	    $me smooth g2g ${maps_more_l[$i]} 0 $(($lmax + 200)) 2048 0. $arcmins ${maps_more_l[$i]/.fits/_highres_${arcmins}arcmin.fits}
	else # chisq is nside 1024
	    $me smooth g2g ${maps_more_l[$i]} 0 $(($lmax + 200)) 1024 0. $arcmins ${maps_more_l[$i]/.fits/_highres_${arcmins}arcmin.fits}
	fi
	ind1=$(($ind1 + 1))
	echo $ind1 of $n_channels finished
    done
    ext="_highres_"$arcmins"arcmin"
fi


if [ $# -gt 2 ] && [ $nside -ne 2048 ]; then   
    echo "ud_grading"
    ind1=0
    for i in ${!maps[@]}; do
	if [ -r ${maps[$i]/.fits/_highres_${arcmins}arcmin.fits} ]; then
	    $me ud_grade ${maps[$i]/.fits/_highres_${arcmins}arcmin.fits} $nside ${maps[$i]/.fits/_n${nside}_${arcmins}arcmin.fits}
	    ind1=$(($ind1 + 1))
	    echo $ind1 of $n_channels finished
	fi
    done
    for i in ${!maps_more_l[@]}; do
	if [ -r ${maps_more_l[$i]/.fits/_highres_${arcmins}arcmin.fits} ]; then
	    $me ud_grade ${maps_more_l[$i]/.fits/_highres_${arcmins}arcmin.fits} $nside ${maps_more_l[$i]/.fits/_n${nside}_${arcmins}arcmin.fits}
	    ind1=$(($ind1 + 1))
	    echo $ind1 of $n_channels finished
	fi
    done
    ext="_n"$nside"_"$arcmins"arcmin"
else
    ext="_highres_"$arcmins"arcmin"
fi


if [ $# == 1 ]; then
    ext=""
fi






echo "---- Plotting CMB ----"
map2png cmb_c0001_k$num$ext.fits -bar -range 250
#map2png cmb_Cl_c0001_k$num$ext.fits -bar -range 250
#map2png sz_c0001_k$num$ext.fits sz_c0001_k${1}.png -bar -min 0 -max 1e-6
#patch2img -lon 270 -lat 80 -size 40 -res 4 sz_c0001_k$num$ext.fits -grid 10 -min 0 -max 5e-6

echo "---- Plotting amplitudes ----"
map2png dust_c0001_k$num$ext.fits -bar -max 1000 -min 0
map2png synch_c0001_k$num$ext.fits -bar -max 1000 -min 0
#map2png ame1_c0001_k$num$ext.fits -bar -max 300
#map2png ame2_c0001_k$num$ext.fits -bar -max 300

#map2png co_c0001_k$num$ext.fits -bar -max 2 -min 0
map2png co10_c0001_k$num$ext.fits -bar -max 2 -min 0
map2png co21_c0001_k$num$ext.fits -bar -max 2 -min 0
map2png co32_c0001_k$num$ext.fits -bar -max 2 -min 0

cp co10_c0001_k$num$ext.fits co10_c0001_k$num${ext}_max10.fits
cp co21_c0001_k$num$ext.fits co21_c0001_k$num${ext}_max10.fits
cp co32_c0001_k$num$ext.fits co32_c0001_k$num${ext}_max10.fits

map2png co10_c0001_k$num${ext}_max10.fits -bar -max 10 -min 0
map2png co21_c0001_k$num${ext}_max10.fits -bar -max 10 -min 0
map2png co32_c0001_k$num${ext}_max10.fits -bar -max 10 -min 0

rm co10_c0001_k$num${ext}_max10.fits
rm co21_c0001_k$num${ext}_max10.fits
rm co32_c0001_k$num${ext}_max10.fits

#map2png co10_c0001_k$num$ext.fits -bar -max 2 -min 0
#map2png co21_c0001_k$num$ext.fits -bar -max 2 -min 0
#map2png co32_c0001_k$num$ext.fits -bar -max 2 -min 0
#map2png hcn_c0001_k$num$ext.fits -bar -max 1 -min 0

echo "---- Plotting indices ----"
map2png dust_beta_c0001_k$num$ext.fits  -bar -min 1.3 -max 2.0
map2png dust_T_c0001_k$num$ext.fits  -bar -min 14 -max 30
#map2png dust_Td_c0001_k$num$ext_nosmooth.fits  -bar -min 14 -max 30
map2png synch_beta_c0001_k$num$ext.fits  -bar -min -4.0 -max -1.5
#map2png ame1_nup_c0001_k$num$ext.fits  -bar -min 17 -max 23
#map2png ame2_nup_c0001_k$num$ext.fits  -bar -min 15 -max 40
#map2png ff_EM_c0001_k$num$ext.fits  -bar -min 0 -max 100
#map2png ff_T_e_c0001_k$num$ext.fits  -bar -min 5000 -max 8000


echo "---- Plotting residuals ----"
freqs=("30" "44" "70" "100" "143" "217" "353" "545" "857")

COUNTER=0
for ((i=0; i<${#freqs[@]}; i++)) ; do
  freq=${freqs[$i]} #Frequency
  for file in res*${freq}*_c0001_k$num$ext.fits; do

    if [[ $file = *\** ]]; then #Check if contains wildcard (Map does not exist)
      echo "WARNING: " $file " does not exist!"
      continue
    fi

    if [ $freq == 545 ] || [ $freq == 857 ] ; then
      map2png -bar -range 1e-2 $file
    else
      map2png -bar -range 10 $file
    fi
    echo "Plotting" $file
    COUNTER=$[$COUNTER +1]
  done
done

mx=$((3 * $COUNTER))
echo "---- Plotting chisq with max of" $mx "----"
map2png chisq_c0001_k$num$ext.fits chisq_k$num$ext.png -bar -max $mx -min 0 #max is 3*numband



# To plot something reasonable we should smooth a little


