#!/bin/bash

me=/mn/stornext/u3/krisjand/quiet_svn/oslo/src/f90/map_editor/map_editor
p2i=/mn/stornext/u3/hke/local/bin/patch2img

if [ $# -lt 1 ] || [ $# -gt 2 ] || [ "$1" = "help" ];then
    echo ""
    echo "Syntax: plotmaps_galaxy_plane_series [inmap] [outmap base string (optional)]"
    echo ""
    exit
fi

if [ -r $1 ];then
    bull=""
else
    echo ""
    echo "Error: input map does not exist!"
    echo ""
    exit
fi

if [ "${1:$((${#1}-5)):5}" = ".fits"  ];then
    bull=""
else
    echo ""
    echo "Error: input map is not a fits-file!"
    echo ""
    exit
fi

inmap=$1

if [ -z $2 ]; then
    outmap_base=${inmap/.fits/}
else
    outmap_base=$2
fi

echo ""
read -p "Image size [deg]: " img_size
read -p "Image center latitude [deg] (galaxy plane = 0) :" img_lat
read -p "Grid size: [deg] (0 or negative to disable): " img_grid
read -p "Pixel resolution [arcmin] :" img_res
range_bool="empty"
while [ "$range_bool" = "empty" ]; do
    read -p "Plot using range (0), min/max (1), or full map range (none): " range_case
    if [ "$range_case" = "0" ]; then
	range_bool="true"
	read -p "Plotting range [units of map]: " img_range
	out_str_start="size${img_size}_range${img_range}"
    elif [ "$range_case" = "1" ]; then
	range_bool="false"
	read -p "Plotting min [units of map]: " img_min
	read -p "Plotting max [units of map]: " img_max
	out_str_start="size${img_size}_min${img_min}_max${img_max}"
    elif [ "$range_case" = "none" ]; then
	range_bool="none"
	out_str_start="size${img_size}"
    fi
done

plot_str="-size $img_size -res $img_res"


if [ $img_grid -gt 0 ]; then
    plot_str="$plot_str -grid $img_grid"
fi

if [ "$range_bool" = "true" ]; then
    plot_str="$plot_str -range $img_range"
elif [ "$range_bool" = "false" ]; then
    plot_str="$plot_str -min $img_min -max $img_max"
fi

plot_str="$plot_str -lat $img_lat"
img_lon=0

last_lon=$(bc <<< "scale=2; 360-${img_size}")

final_img=false
echo "Plotting plane, lat = $img_lat"
while [ "$final_img" = "false" ]; do
    
    outmap="${out_str_start}_lon${img_lon}_lat${img_lat}_${outmap_base}.png"
    $p2i $inmap $plot_str -lon $img_lon
    mv ${inmap/.fits/.png} $outmap

    echo $outmap
    lon_test=$(bc <<< "scale=2; ${last_lon}-${img_lon}")
    lon_test=$(bc <<< "100*${lon_test}/1")
    if [ $lon_test -le 0 ]; then
	final_img="true"
    else
	img_lon=$(bc <<< "${img_lon}+$img_size")    
    fi
    
done




