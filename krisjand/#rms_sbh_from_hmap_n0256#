#!/bin/bash

me=/mn/stornext/u3/krisjand/quiet_svn/oslo/src/f90/map_editor/map_editor
freqs=("030" "044" "070" "100" "143" "217" "353" "545" "857")

if [ $# -ne 2 ]; then
    echo ""
    echo "Syntax: rms_sbh_from_hmap_complete [npipe version] [sigma file]"
    echo ""
    echo "e.g. rms_sbh_from_hmap_complete npipe5v21 noise_levels.txt"
    echo ""
    echo "This complete nside script takes the original hmaps (of different nside) in"
    echo "the same directory as the original skymaps."
    echo "The output (in the directory specified) is the new hmaps (original nside, "
    echo "n0064, n0256and n2048 if original nside is larger), as well as the corresponding"
    echo "rms maps with its given mask."
    echo ""
    exit
fi

npipe=$1
sig_file=$2

#Band labels for each 
l_np=${#npipe}
l_LFI=$((15 + $l_np))
l_HFI=$((11 + $l_np))

count=0
while IFS="" read -r line; do
    aline=($line)
    label_ar[$count]=${aline[0]}
    sig_ar[$count]=${aline[1]:0:10}
    echo $count
    echo ${label_ar[$count]}
    echo ${sig_ar[$count]}
    echo ""
    count=$(($count + 1))

done < $sig_file
	  


for ((i=0; i<${#freqs[@]}; i++)) ; do
  freq=${freqs[$i]} #Frequency
#  g=${gainz[$i]} # Gain for zodimap multiplication, only use if LFI gains differ from 0.15 0.28 and 0.56

#  for inputmap in "npipe"${npipe}*${freq}*"_bmap.fits"; do
  for inputmap in "../"${npipe}*${freq}*"_bmap_K.fits"; do
      if [[ $inputmap = *\** ]]; then #Check if contains wildcard (Map does not exist)
	  echo "WARNING: " $inputmap " does not exist!"
	  continue
      fi
      echo "Calculating RMS for $inputmap"
#      inmap=${inputmap/bmap/hmap}
      inmap=${inputmap/bmap_K/hmap_n0256}
      inmap=${inmap/'../'/}
      echo "Input hmap: $inmap"

      if [ $freq -lt 100 ] ; then
	  echo "$freq this is LFI"
	  nside=1024

#      elif [ $freq -gt 353 ] ; then #545 and 857
#	  echo "$freq this is HFI (545 and 857)"
#	  #HFI
#	  nside=2048
#	  gain=1.0000 
#	  while IFS="" read -r line; do
#	      aline=($line)
#	      if [ "${aline[0]}" = "${inmap/hmap/bmap_MDCOR}" ]; then
#		  gain=${aline[2]}
#		  break
#	      fi
#	  done < $gain_file
#	  if [ $gain -eq 0.0 ]; then
#	      echo "Gain for file '${inmap/hmap/bmap_MDCOR}' in '$gain_file' doesn't exist"
#	      continue
#	  fi
      else
	  echo "$freq this is HFI"
	  #HFI
	  nside=2048
      fi

      

      if [ $freq -lt 100 ] ; then
	  in_a=(${inmap/_/ })
	  in_a=(${in_a[@]/_/ })
	  in_a=(${in_a[@]/_/ })
	  channel=${in_a[2]}
	  echo "the channel is $channel"
	  if [ -e $inmap ];then # sbolo, shorn don't have hmap
	      sb="true"
	      echo "single bolo"
	  else #shorn
	      sb="false"
	      echo "single horn"
	  fi
	  if [ "$sb" = "true" ]; then
	      sig_1=0
	      for ((j=0; j<${#sig_ar[@]}; j++)) ; do
		  if [ "${label_ar[$j]}" = "$channel" ]; then
		      sig_1=${sig_ar[$j]}
		      break
		  fi
	      done 
	      echo "sig_1 = $sig_1"
#	      $me sbolo_rms ${inmap} ${sig_1} ${inmap/_hmap.fits/} K
	      $me sbolo_rms ${inmap} ${sig_1} ${inmap/_hmap_n0256.fits/_n0256} K
	  
	  else
	      sig_1=0
	      for ((j=0; j<${#sig_ar[@]}; j++)) ; do
	      	  if [ "${label_ar[$j]}" = "${channel}M" ]; then
		      sig_1=${sig_ar[$j]}
		      break
		  fi
	      done 
	      echo "sig_1 = $sig_1"
	      sig_2=0
	      for ((j=0; j<${#sig_ar[@]}; j++)) ; do
	      	  if [ "${label_ar[$j]}" = "${channel}S" ]; then
		      sig_2=${sig_ar[$j]}
		      break
		  fi
	      done 
	      echo "sig_2 = $sig_2"
	      $me shorn_rms ${inmap/$channel/${channel}M} ${sig_1} ${inmap/$channel/${channel}S} ${sig_2} ${inmap/_hmap_n0256.fits/_n0256} K
#	      $me shorn_rms ${inmap/$channel/${channel}M} ${sig_1} ${inmap/$channel/${channel}S} ${sig_2} ${inmap/_hmap.fits/} K
	  fi

#      elif [ $freq -gt 353 ] ; then #545 and 857
#	  in_a=(${inmap/_/ })
#	  in_a=(${in_a[@]/_/ })
#	  channel=${in_a[1]}
#	  echo "the channel is $channel"
#	  if [ -e $inmap ];then # sbolo, shorn don't have hmap
#	      sb="true"
#	      echo "single bolo"
#	  else #shorn
#	      sb="false"
#	      echo "single horn"
#	  fi
#
#	  if [ "$sb" = "true" ]; then
#	      sig_1=0
#	      for ((j=0; j<${#sig_ar[@]}; j++)) ; do
#	      	  if [ "${label_ar[$j]}" = "$channel" ]; then
#		      sig_1=${sig_ar[$j]}
#		      break
#		  fi
#	      done 
#	      echo "sig_1 = $sig_1"
#	      $me sbolo_rms ${inmap} ${sig_1} ${inmap/_hmap.fits/} Jy $gain
#	  fi

      else
	  in_a=(${inmap/_/ })
	  in_a=(${in_a[@]/_/ })
	  channel=${in_a[1]}
	  echo "the channel is $channel"
	  if [ -e $inmap ];then # sbolo, shorn don't have hmap
	      sb="true"
	      echo "single bolo"
	  else #shorn
	      sb="false"
	      echo "single horn"
	  fi

	  if [ "$sb" = "true" ]; then
	      sig_1=0
	      for ((j=0; j<${#sig_ar[@]}; j++)) ; do
	      	  if [ "${label_ar[$j]}" = "$channel" ]; then
		      sig_1=${sig_ar[$j]}
		      break
		  fi
	      done 
	      echo "sig_1 = $sig_1"
	      $me sbolo_rms ${inmap} ${sig_1} ${inmap/_hmap_n0256.fits/_n0256} K
#	      $me sbolo_rms ${inmap} ${sig_1} ${inmap/_hmap.fits/} K
	  
	  else
	      sig_1=0
	      for ((j=0; j<${#sig_ar[@]}; j++)) ; do
	      	  if [ "${label_ar[$j]}" = "${channel}a" ]; then
		      sig_1=${sig_ar[$j]}
		      break
		  fi
	      done 
	      echo "sig_1 = $sig_1"
	      
	      sig_2=0
	      for ((j=0; j<${#sig_ar[@]}; j++)) ; do
	      	  if [ "${label_ar[$j]}" = "${channel}b" ]; then
		      sig_2=${sig_ar[$j]}
		      break
		  fi
	      done 
	      echo "sig_2 = $sig_2"
	      $me shorn_rms ${inmap/$channel/${channel}a} ${sig_1} ${inmap/$channel/${channel}b} ${sig_2} ${inmap/_hmap_n0256.fits/_n0256} K
#	      $me shorn_rms ${inmap/$channel/${channel}a} ${sig_1} ${inmap/$channel/${channel}b} ${sig_2} ${inmap/_hmap.fits/} K
	  fi
      fi

      echo ""
      echo "-----------------------------------------------------"

#    if [ $freq == 545 ] || [ $freq == 857 ] ; then
#      map2png ${inmap/MDCOR/MDCOR_"${outputname}"} -bar -min 0 -max 10
#    elif [ $freq == 353 ] ; then
#      map2png ${inmap/MDCOR/MDCOR_"${outputname}"} -bar -min 0 -max 3000
#    else
#      map2png ${inmap/MDCOR/MDCOR_"${outputname}"} -bar -min 0 -max 300
#    fi


  done
done

