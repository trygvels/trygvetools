#!/bin/bash

# from mdc bash script
# here we only subtract the quadrupole, and let the dipole stay in the maps

me=/mn/stornext/u3/hke/owl/quiet_svn/oslo/src/f90/map_editor/map_editor

freqs=("30" "44" "70" "100" "143" "217" "353" "545" "857")
#gainz=("0.982432" "0.997485" "0.996080" "1.000000" "1.000816" "1.000347" "1.000000" "1.000000" "1.100000")

# testing for default gain
#gainz=("1.000000" "1.000000" "1.000000" "0.999400" "1.000000" "1.000000" "1.001000" "1.000000" "1.100000")

#gains for quadpole correction and all amps in uK
gainz=("1.000000" "1.000000" "1.000000" "1.000000" "1.000000" "1.000000" "1.000000" "1.000000" "1.000000")

#testing old and new
#gainz=("0.992432" "0.997485" "0.996080" "0.999300" "1.000000" "1.000300" "1.001500" "1.000000" "1.100000")
#freqs=("100" "217" "353")
#gainz=("1.000000" "1.000347" "1.000000")
#freqs=("545" "857")
#gainz=("1.000000" "1.100000")
#sbolo="calibrated_n0256_"${freq}"_map.fits"
#npipe="npipe5v"${freq}"_n0256_map.fits"

#dx12="../dx12/map_dx12_"*"v2_"${freq}"_0256_40arcmin_full.fits"


masks=("commander_dx12_mask_n0256_likelihood_v2.fits"
"commander_dx12_mask_n1024_likelihood_v2.fits"
"commander_dx12_mask_n2048_likelihood_v2.fits")

masksfullsky=("mask_fullsky_n256_tqu.fits"
"mask_fullsky_n1024_tqu.fits"
"mask_fullsky_n2048_tqu.fits")

read -p "Output map name extension [ex. QUADCOR] " outputname

mask_dir=/mn/stornext/u3/krisjand/stornext/npipe_lowres/data/

for ((i=0; i<${#freqs[@]}; i++)) ; do
  freq=${freqs[$i]} #Frequency
  echo
  g=${gainz[$i]} #Gain for quadrupole multiplication
#  adjmap="/mn/stornext/u3/krisjand/stornext/npipe_lowres/data/dx12/map_dx12_"*${freq}"_0256_40arcmin_full.fits" #Map to adjust to
  for inputmap in "npipe5v"*${freq}*"_n0256_40arcmin"*".fits"; do  # input maps (nside 256), with directory
  #for inputmap in "calibrated_n0256_"${freq}*"_map.fits"; do
    echo "----------------------------------------------------------------------------------"
    echo "Frequency: " ${freq}
    echo "Method 1"
    echo "Input map: " ${inputmap}
#    echo "Adjusting with: " ${adjmap}
    echo "Using gain for quadrupole" $g
    echo "----------------------------------------------------------------------------------"

    j=0
    nside=0256
    #dipolemap to check gain values (MJy/sr etc.)
#    dipolemap="/mn/stornext/u3/krisjand/stornext/dipolemaps/dipole_CMB_n"$nside"_"${freq}"GHz.fits"
    #quadrupole map to subtract from map
    quadmap="/mn/stornext/u3/krisjand/stornext/dipolemaps/quadrupole_CMB_n"$nside"_"${freq}"GHz.fits"
    #-------------------- FIT GAIN OFFSET - GET GAIN AND OFFSET ----------------------
#    $me fit_gain_offset_dipole ${adjmap} ${inputmap} ${mask_dir}${masksfullsky[$j]} ${mask_dir}${masks[$j]} residual.fits 2>/dev/null > fit_gain_temp.txt #save output and ignore error

    # EXTRACT OFFSET OUTPUT
#    tr -s '[:space:]' < fit_gain_temp.txt # Remove double spaces
#    offset=($(tail -n 1 fit_gain_temp.txt | grep -oP '(?<=offset\ =\ ).*'))
    # EXTRACT GAIN OUTPUT
#    gain=$(tail -n 1 fit_gain_temp.txt | grep -oP '(?<=gain\ =\ ).*(?=,)')
#    gain=$(bc -l <<< "1/$gain") # 1/gain calculator

#    echo "gain: $gain offset:  ${offset[0]} ${offset[1]} ${offset[2]} ${offset[3]}"

#    offset=$(echo -"($offset)" | bc -l) # Invert offset


    #-------------------- SUBTRACT DIPOLE MAP ----------------------
    #-------------------- ADD OFFSET and SCALE WITH 1/GAIN ----------------------
    echo "Subtracting with quadrupole maps"
#    if [ $freq == 545 ] || [ $freq == 857 ] ; then
#	$me scale $quadmap quadmap_uK.fits 1
#    else
#	$me scale $quadmap quadmap_uK.fits 1e6
#    fi
    $me scale $quadmap quadmap_uK.fits 1e6
    $me scale quadmap_uK.fits quadmap_uK.fits $g #Adjusting with quad gain


    $me subtract ${inputmap} quadmap_uK.fits ${inputmap/map/map_"${outputname}"}

#    echo "Adding offset of ${offset[0]}"
#    $me add_offset ${inputmap/map/map_"${outputname}"} ${inputmap/map/map_"${outputname}"} ${offset[0]}

    # Convert units if 545 and 857
#    if [ $freq == 545 ] || [ $freq == 857 ] ; then
#	echo "SCALING BLABLA"
#	$me scale ${inputmap/map/map_"${outputname}"} ${inputmap/map/map_"${outputname}"} $gain #This is only for unit conversion on 545 and 857
#	map2png ${inputmap/map/map_"${outputname}"} -bar -min 0 -max 10
    if [ $freq == 857 ] ; then
	map2png ${inputmap/map/map_"${outputname}"} -bar -min 0 -max 4000000
    elif  [ $freq == 545 ] ; then
	map2png ${inputmap/map/map_"${outputname}"} -bar -min 0 -max 40000
    elif  [ $freq == 353 ] ; then
	map2png ${inputmap/map/map_"${outputname}"} -bar -min 0 -max 3000
    else
	map2png ${inputmap/map/map_"${outputname}"} -bar -min 0 -max 300
    fi
    rm quadmap_uK.fits 2>/dev/null
    rm fit_gain_temp.txt 2>/dev/null
    rm residual.fits 2>/dev/null
  done
done
